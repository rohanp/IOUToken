/*pragma solidity ^0.4.18;

contract ERC20 {
 3     function totalSupply() constant returns (uint totalSupply);
 4     function balanceOf(address _owner) constant returns (uint balance);
 5     function transfer(address _to, uint _value) returns (bool success);
 6     function transferFrom(address _from, address _to, uint _value) returns (bool success);
 7     function approve(address _spender, uint _value) returns (bool success);
 8     function allowance(address _owner, address _spender) constant returns (uint remaining);
 9     event Transfer(address indexed _from, address indexed _to, uint _value);
10     event Approval(address indexed _owner, address indexed _spender, uint _value);
11 }

An ERC-20 token for tradable personal loans with interest completely on-chain
contract IOUToken {
	
	string public name;
	string public symbol;
	address public lender;
	uint public apr;
	mapping (address => uint) public balances;
	address[] public people;
	uint public totalSupply;

	function IOUToken(string _name, string _symbol, uint _apr, uint _totalSupply) public {
		lender = msg.sender;
		name = name;

		totalSupply = 10 ** 5;
		balances[lender] =  totalSupply;
	}

	function name() constant returns (string name){
		return name;
	}

	function symbol() constant returns (string symbol){
		return symbol;
	}

	function transferFrom(address from, address to, uint amount) public {
		require(balances[from] >= amount); // enough money to send

		balances[from] -= amount;
		balances[to] += amount;
	}

	function totalSupply() constant returns (uint totalSupply){
		return totalSupply;
	}

	function balanceOf(address owner) constant returns (uint balance){
		return balances[owner];
	}

	function transfer(address to, uint value) returns (bool success){
		require(balances[msg.sender] >= amount);

		balances[msg.sender] -= amount;
		balances[to] += amount;
		return balances[msg.sender];
	}

	function transferFrom(address from, address to, uint value) returns (bool success){
		require(msg.sender == lender);
		require(balances[from] >= amount);

		balances[from] -= amount;
		balances[to] += amount;

		return true;
	}

	function allowance(address _owner, address _spender) constant returns (uint remaining){

	}

}
*/
